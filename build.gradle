buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

apply from: 'publish-maven.gradle'

apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/test.exec"
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.links.homepage', 'https://github.com/spring-gradle-plugins/dependency-management-plugin'
        property 'sonar.links.issue', 'https://github.com/spring-gradle-plugins/dependency-management-plugin/issues'
        property 'sonar.links.scm', 'https://github.com/spring-gradle-plugins/dependency-management-plugin'
    }
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = [ 'checkstyle.config.dir' : rootProject.file('config/checkstyle') ]
    toolVersion = '7.3'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

group = 'io.spring.gradle'
description = 'Dependency Management Plugin'

ext {
    cglibVersion = '3.1'
    jarjarVersion = '1.2.1'
    mavenVersion = '3.0.4'
    spockVersion = GroovySystem.version.startsWith('1.') ? '0.7-groovy-1.8' : '0.7-groovy-2.0'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

configurations {
    jarjar
    maven
}

task mavenRepackJar(type: Jar) { repackJar ->
    repackJar.baseName = "maven-repack"
    repackJar.version = mavenVersion

    doLast() {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath
            jarjar(destfile: repackJar.archivePath) {
                configurations.maven.each { originalJar ->
                    zipfileset(src: originalJar)
                }
                rule(pattern: 'org.**', result: 'io.spring.gradle.dependencymanagement.org.@1')
            }
        }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile(files(mavenRepackJar))
    jarjar "org.gradle.jarjar:jarjar:$jarjarVersion"
    maven "org.apache.maven:maven-model-builder:$mavenVersion"
    testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile "cglib:cglib-nodep:$cglibVersion"
}

jar {
    dependsOn mavenRepackJar
    from(zipTree(mavenRepackJar.archivePath)) {
        include 'io/spring/gradle/**'
        include 'META-INF/plexus/**'
    }

    manifest {
        attributes(
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
            'Implementation-Title': project.description,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Pivotal Software, Inc.'
        )
    }
}

javadoc {
    title = "$project.description $project.version API"
    exclude 'io/spring/gradle/dependencymanagement/internal/**'
    options {
        links "https://docs.gradle.org/${GradleVersion.current().version}/javadoc/",
            'https://docs.oracle.com/javase/6/docs/api/',
            "http://docs.groovy-lang.org/${GroovySystem.version}/html/gapi/"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jacoco {
    toolVersion = '0.7.8'
}

test {
    testLogging {
        quiet {
            events 'failed'
            exceptionFormat 'full'
        }
        exceptionFormat 'full'
    }
}

artifactory {
    contextUrl = 'https://repo.spring.io'
    publish {
        repository {
            repoKey = 'plugins-snapshot-local'
            if (project.hasProperty('artifactoryUsername')
                    && project.hasProperty('artifactoryPassword')) {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}

artifactoryPublish {
    publishConfigs 'archives'
    publishIvy false
    properties = [
        'bintray.package': "${project.group}:dependency-management",
        'bintray.version': "${project.version}"
    ]
}